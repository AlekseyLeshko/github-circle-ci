#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
aliases:
  - &deploy_branch_to_dev
    filters:
      branches:
        only:
          - /feature\/.*/
          - /bugfix\/.*/

  - &restore_cache
    keys:
      - v2-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}
      # Fallback in case checksum fails
      - v2-dependencies-{{ .Branch }}-

  - &save_cache
    paths:
      - node_modules
      - /usr/local/share/.cache/yarn/v4
    key: v2-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}

  - &install_dependencies yarn --no-progress --frozen-lockfile

jobs:
  flow:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run:
          name: Check flow
          command: echo 'check flow'

  flow_coverage:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run:
          name: Flow coverage
          command: echo 'flow coverage 100%'

  storybook:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run: echo 'Build storybook'

  bundle_analyzer:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run: echo 'Bundle analyzer'

  build:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run: echo 'Build project'

  deploy_to_stage:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: echo 'Deploy to stage'

  e2e_testing:
    parallelism: 2
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache

      - run:
          name: Simulation e2e testing
          command: npm run test:ci

      - store_artifacts:
          path: coverage
          prefix: coverage

  unit_testing:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache

      - run:
          name: Unit testing
          command: npm run test:ci

      - store_test_results:
          path: coverage

      - store_artifacts:
          path: coverage
          prefix: coverage

  master_branch:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - run:
          name: Update version or exit
          command: |
            export CURRENT_HASH=$(echo $(git rev-parse --short HEAD))
            echo $CURRENT_HASH
            # export TAG=$(echo $(git tag --contains $CURRENT_HASH))
            # echo $TAG
            # if [ ! -z "$TAG" ] ; then exit 0; fi
            export COMMIT_MESSAGE="$(echo $(git log -n 1 --pretty=format:%B))"
            echo $COMMIT_MESSAGE
            export VERSION_TYPE="patch"
            # export VERSION_TYPE=$(node pipelines/get-version-type.js "$COMMIT_MESSAGE")
            echo $VERSION_TYPE
            git --version
            git status
            # npm version $VERSION_TYPE -m "v%s"
            # git status
            # git push --follow-tags

workflows:
 version: 2
 main_workflow:
  jobs:
    - flow: *deploy_branch_to_dev
    - flow_coverage: *deploy_branch_to_dev
    - storybook: *deploy_branch_to_dev
    - bundle_analyzer: *deploy_branch_to_dev
    - build: *deploy_branch_to_dev
    - unit_testing: *deploy_branch_to_dev

    - deploy_to_stage:
        <<: *deploy_branch_to_dev
        requires:
          - flow
          - flow_coverage
          - storybook
          - bundle_analyzer
          - build
          - unit_testing

    - e2e_testing:
        <<: *deploy_branch_to_dev
        requires:
          - deploy_to_stage

 master_workflow:
  jobs:
    - master_branch:
      filters:
        branches:
          only: master
        tags:
          ignore: /.*/
