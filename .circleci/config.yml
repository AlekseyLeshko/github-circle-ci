#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
aliases:
  - &deploy_to_dev
    context: dev
    filters:
      branches:
        only:
          - /feature\/.*/
          - /bugfix\/.*/

  - &deploy_to_stage
    context: stage
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /v.*/

  - &restore_cache
    keys:
      - v2-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}
      # Fallback in case checksum fails
      - v2-dependencies-{{ .Branch }}-

  - &save_cache
    paths:
      - node_modules
      - /usr/local/share/.cache/yarn/v4
    key: v2-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}

  - &install_dependencies yarn --no-progress --frozen-lockfile

  - &show_env_variables
    name: Env variables
    command: |
      echo ${REPO_VARIABLE}
      echo ${CONTEXT}
      echo ${API_URL}
      echo ${TOKEN}

jobs:
  env:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables

  flow:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - checkout
      - run: *show_env_variables
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run:
          name: Check flow
          command: echo 'check flow'

  flow_coverage:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run:
          name: Flow coverage
          command: echo 'flow coverage 100%'

  storybook:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run: echo 'Build storybook'

  bundle_analyzer:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run: echo 'Bundle analyzer'

  build:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache
      - run: echo 'Build project'

  deploy_to_aws:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - run: echo 'Deploy to stage'

  e2e_testing:
    parallelism: 2
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache

      - run:
          name: Simulation e2e testing
          command: npm run test:ci

      - store_artifacts:
          path: coverage
          prefix: coverage

  unit_testing:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - checkout
      - restore_cache: *restore_cache
      - run: *install_dependencies
      - save_cache: *save_cache

      - run:
          name: Unit testing
          command: npm run test:ci

      - store_test_results:
          path: coverage

      - store_artifacts:
          path: coverage
          prefix: coverage

  master_branch:
    docker:
      - image: circleci/node:10.10.0
    resource_class: small
    steps:
      - run: *show_env_variables
      - add_ssh_keys:
          fingerprints:
            - "d2:fe:f7:91:bb:85:92:49:c7:d4:cf:ae:f5:d8:eb:b8"
      - checkout
      - run:
          name: Update version or exit
          command: |
            export CURRENT_HASH=$(echo $(git rev-parse --short HEAD))
            echo $CURRENT_HASH
            export COMMIT_MESSAGE="$(echo $(git log -n 1 --pretty=format:%B))"
            echo $COMMIT_MESSAGE
            export VERSION_TYPE="patch"
            export TAG=$(echo $(git tag --contains $CURRENT_HASH))
            echo $TAG
            # export VERSION_TYPE=$(node pipelines/get-version-type.js "$COMMIT_MESSAGE")
            if [ ! -z "$TAG" ] ; then exit 0; fi
            echo $VERSION_TYPE
            git --version
            git status
            git config --global push.default simple
            git config --global user.email "circleci@example.com"
            git config --global user.name "CircleCI"
            npm version $VERSION_TYPE -m "v%s"
            git status
            git push --follow-tags

workflows:
  development_workflow:
    jobs:
      - env: *deploy_to_dev
      - flow: *deploy_to_dev
      - flow_coverage: *deploy_to_dev
      - storybook: *deploy_to_dev
      - bundle_analyzer: *deploy_to_dev
      - build: *deploy_to_dev
      - unit_testing: *deploy_to_dev

      - deploy_to_aws:
          <<: *deploy_to_dev
          requires:
            - flow
            - flow_coverage
            - storybook
            - bundle_analyzer
            - build
            - unit_testing

      - e2e_testing:
          <<: *deploy_to_dev
          requires:
            - deploy_to_aws

  staging_workflow:
    jobs:
      - env: *deploy_to_stage
      - flow: *deploy_to_stage
      - flow_coverage: *deploy_to_stage
      - storybook: *deploy_to_stage
      - bundle_analyzer: *deploy_to_stage
      - build: *deploy_to_stage
      - unit_testing: *deploy_to_stage

      - deploy_to_aws:
          <<: *deploy_to_stage
          requires:
            - flow
            - flow_coverage
            - storybook
            - bundle_analyzer
            - build
            - unit_testing

      - e2e_testing:
          <<: *deploy_to_stage
          requires:
            - deploy_to_aws

  master_workflow:
    jobs:
      - master_branch:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
